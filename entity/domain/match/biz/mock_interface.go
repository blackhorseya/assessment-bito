// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package biz is a generated GoMock package.
package biz

import (
	reflect "reflect"

	agg "github.com/blackhorseya/assessment-bito/entity/domain/match/agg"
	model "github.com/blackhorseya/assessment-bito/entity/domain/match/model"
	contextx "github.com/blackhorseya/assessment-bito/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIMatchBiz is a mock of IMatchBiz interface.
type MockIMatchBiz struct {
	ctrl     *gomock.Controller
	recorder *MockIMatchBizMockRecorder
}

// MockIMatchBizMockRecorder is the mock recorder for MockIMatchBiz.
type MockIMatchBizMockRecorder struct {
	mock *MockIMatchBiz
}

// NewMockIMatchBiz creates a new mock instance.
func NewMockIMatchBiz(ctrl *gomock.Controller) *MockIMatchBiz {
	mock := &MockIMatchBiz{ctrl: ctrl}
	mock.recorder = &MockIMatchBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMatchBiz) EXPECT() *MockIMatchBizMockRecorder {
	return m.recorder
}

// EnrollPlayer mocks base method.
func (m *MockIMatchBiz) EnrollPlayer(ctx contextx.Contextx, name string, height uint, gender model.Gender, age, numsOfWantedDates uint) (*agg.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollPlayer", ctx, name, height, gender, age, numsOfWantedDates)
	ret0, _ := ret[0].(*agg.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnrollPlayer indicates an expected call of EnrollPlayer.
func (mr *MockIMatchBizMockRecorder) EnrollPlayer(ctx, name, height, gender, age, numsOfWantedDates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollPlayer", reflect.TypeOf((*MockIMatchBiz)(nil).EnrollPlayer), ctx, name, height, gender, age, numsOfWantedDates)
}

// GetPlayerByIDWithPairs mocks base method.
func (m *MockIMatchBiz) GetPlayerByIDWithPairs(ctx contextx.Contextx, playerID string, option ListPairsOption) (*agg.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByIDWithPairs", ctx, playerID, option)
	ret0, _ := ret[0].(*agg.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayerByIDWithPairs indicates an expected call of GetPlayerByIDWithPairs.
func (mr *MockIMatchBizMockRecorder) GetPlayerByIDWithPairs(ctx, playerID, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByIDWithPairs", reflect.TypeOf((*MockIMatchBiz)(nil).GetPlayerByIDWithPairs), ctx, playerID, option)
}

// ListPlayers mocks base method.
func (m *MockIMatchBiz) ListPlayers(ctx contextx.Contextx, option ListPlayersOption) ([]*agg.Player, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayers", ctx, option)
	ret0, _ := ret[0].([]*agg.Player)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlayers indicates an expected call of ListPlayers.
func (mr *MockIMatchBizMockRecorder) ListPlayers(ctx, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayers", reflect.TypeOf((*MockIMatchBiz)(nil).ListPlayers), ctx, option)
}

// SubmitPair mocks base method.
func (m *MockIMatchBiz) SubmitPair(ctx contextx.Contextx, leftID, rightID string) (*model.Pair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitPair", ctx, leftID, rightID)
	ret0, _ := ret[0].(*model.Pair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitPair indicates an expected call of SubmitPair.
func (mr *MockIMatchBizMockRecorder) SubmitPair(ctx, leftID, rightID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitPair", reflect.TypeOf((*MockIMatchBiz)(nil).SubmitPair), ctx, leftID, rightID)
}

// UnregisterPlayer mocks base method.
func (m *MockIMatchBiz) UnregisterPlayer(ctx contextx.Contextx, playerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterPlayer", ctx, playerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterPlayer indicates an expected call of UnregisterPlayer.
func (mr *MockIMatchBizMockRecorder) UnregisterPlayer(ctx, playerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterPlayer", reflect.TypeOf((*MockIMatchBiz)(nil).UnregisterPlayer), ctx, playerID)
}
