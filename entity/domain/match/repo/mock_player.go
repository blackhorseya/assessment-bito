// Code generated by MockGen. DO NOT EDIT.
// Source: player.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	agg "github.com/blackhorseya/assessment-bito/entity/domain/match/agg"
	model "github.com/blackhorseya/assessment-bito/entity/domain/match/model"
	contextx "github.com/blackhorseya/assessment-bito/pkg/contextx"
	gomock "go.uber.org/mock/gomock"
)

// MockIPlayerRepo is a mock of IPlayerRepo interface.
type MockIPlayerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPlayerRepoMockRecorder
}

// MockIPlayerRepoMockRecorder is the mock recorder for MockIPlayerRepo.
type MockIPlayerRepoMockRecorder struct {
	mock *MockIPlayerRepo
}

// NewMockIPlayerRepo creates a new mock instance.
func NewMockIPlayerRepo(ctrl *gomock.Controller) *MockIPlayerRepo {
	mock := &MockIPlayerRepo{ctrl: ctrl}
	mock.recorder = &MockIPlayerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlayerRepo) EXPECT() *MockIPlayerRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockIPlayerRepo) GetByID(ctx contextx.Contextx, id string) (*agg.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*agg.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPlayerRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPlayerRepo)(nil).GetByID), ctx, id)
}

// JoinPlayer mocks base method.
func (m *MockIPlayerRepo) JoinPlayer(ctx contextx.Contextx, player *agg.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPlayer", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinPlayer indicates an expected call of JoinPlayer.
func (mr *MockIPlayerRepoMockRecorder) JoinPlayer(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPlayer", reflect.TypeOf((*MockIPlayerRepo)(nil).JoinPlayer), ctx, player)
}

// LeavePlayer mocks base method.
func (m *MockIPlayerRepo) LeavePlayer(ctx contextx.Contextx, player *agg.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeavePlayer", ctx, player)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeavePlayer indicates an expected call of LeavePlayer.
func (mr *MockIPlayerRepoMockRecorder) LeavePlayer(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeavePlayer", reflect.TypeOf((*MockIPlayerRepo)(nil).LeavePlayer), ctx, player)
}

// ListPlayers mocks base method.
func (m *MockIPlayerRepo) ListPlayers(ctx contextx.Contextx, condition ListPlayersCondition) ([]*agg.Player, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlayers", ctx, condition)
	ret0, _ := ret[0].([]*agg.Player)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlayers indicates an expected call of ListPlayers.
func (mr *MockIPlayerRepoMockRecorder) ListPlayers(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlayers", reflect.TypeOf((*MockIPlayerRepo)(nil).ListPlayers), ctx, condition)
}

// MatchedPair mocks base method.
func (m *MockIPlayerRepo) MatchedPair(ctx contextx.Contextx, left, right *agg.Player, pair *model.Pair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchedPair", ctx, left, right, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// MatchedPair indicates an expected call of MatchedPair.
func (mr *MockIPlayerRepoMockRecorder) MatchedPair(ctx, left, right, pair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchedPair", reflect.TypeOf((*MockIPlayerRepo)(nil).MatchedPair), ctx, left, right, pair)
}
